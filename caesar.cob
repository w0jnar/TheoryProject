IDENTIFICATION DIVISION.
PROGRAM-ID. CAESAR.
AUTHOR. Thomas Wojnar
ENVIRONMENT DIVISION.

DATA DIVISION.
WORKING-STORAGE SECTION.
      01 ENSTR PIC X(50).
	  77 OFFSET PIC 99.
      01 OUTSTR PIC X(50).
PROCEDURE DIVISION.
	  DISPLAY "Please enter the string to encrypt."
	  ACCEPT ENSTR
      DISPLAY "Please enter the offset to encrypt by."
	  ACCEPT OFFSET
	  CALL 'ENCRYPT' USING BY CONTENT ENSTR OFFSET.
	  
	  DISPLAY SPACE
	  DISPLAY "Please enter the string to decrypt."
	  ACCEPT ENSTR
      DISPLAY "Please enter the offset to decrypt by."
	  ACCEPT OFFSET
	  CALL 'DECRYPT' USING BY CONTENT ENSTR OFFSET.
	  
	  DISPLAY SPACE
	  DISPLAY "Please enter the string to solve."
	  ACCEPT ENSTR
      DISPLAY "Please enter the maximum offset."
	  ACCEPT OFFSET
	  CALL 'SOLVE' USING BY CONTENT ENSTR OFFSET.
  	  STOP RUN.
  
IDENTIFICATION DIVISION.
PROGRAM-ID. ENCRYPT. 
DATA DIVISION.
  	  WORKING-STORAGE SECTION.
      01 LEN PIC 99.
  	  01 MODOFF PIC 99.
  	  01 CHK PIC 99 VALUE 1.
	  01 RECHAR PIC X(1).
LINKAGE SECTION.
      01 ENSTR PIC X(50).
      77 OFFSET PIC 99.
PROCEDURE DIVISION USING ENSTR OFFSET.
	  INSPECT ENSTR CONVERTING "abcdefghijklmnopqrstuvwxyz" TO "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	  COMPUTE MODOFF = FUNCTION MOD (OFFSET, 26)
	  INSPECT FUNCTION REVERSE(ENSTR) TALLYING LEN FOR LEADING SPACES 
	  COMPUTE LEN = LENGTH OF ENSTR - LEN.
	  PERFORM UNTIL CHK = LEN
	  
	  IF ((FUNCTION ORD(ENSTR(CHK:1)) + MODOFF) > (FUNCTION ORD('Z')))
	     MOVE FUNCTION CHAR((FUNCTION ORD(ENSTR(CHK:1)) + MODOFF) - 26) TO RECHAR
	  ELSE
		 MOVE FUNCTION CHAR(FUNCTION ORD(ENSTR(CHK:1)) + MODOFF) TO RECHAR
	  END-IF	 
	  IF (((FUNCTION ORD(ENSTR(CHK:1))) >= (FUNCTION ORD('A'))) AND 
	     ((FUNCTION ORD(ENSTR(CHK:1))) <= (FUNCTION ORD('Z'))))
		 IF ((FUNCTION ORD(ENSTR(CHK:1)) + MODOFF) > (FUNCTION ORD('Z')))
		    INSPECT ENSTR(CHK:1) REPLACING ALL ENSTR(CHK:1) BY RECHAR
         ELSE
			INSPECT ENSTR(CHK:1) REPLACING ALL ENSTR(CHK:1) BY RECHAR
  		 END-IF
	  ELSE
			INSPECT ENSTR(CHK:1) REPLACING ALL ENSTR(CHK:1) BY ENSTR(CHK:1)
  	  END-IF
      COMPUTE CHK = CHK + 1
  	  END-PERFORM.
	  DISPLAY ENSTR.
      EXIT PROGRAM.
  END PROGRAM ENCRYPT.
  
IDENTIFICATION DIVISION.
PROGRAM-ID. DECRYPT. 
DATA DIVISION.
  	  WORKING-STORAGE SECTION.
      01 LEN PIC 99.
  	  01 MODOFF PIC 99.
  	  01 CHK PIC 99 VALUE 1.
	  01 RECHAR PIC X(1).
LINKAGE SECTION.
      01 ENSTR PIC X(50).
      77 OFFSET PIC 99.
PROCEDURE DIVISION USING ENSTR OFFSET.
	  INSPECT ENSTR CONVERTING "abcdefghijklmnopqrstuvwxyz" TO "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	  COMPUTE MODOFF = FUNCTION MOD (OFFSET, 26)
	  INSPECT FUNCTION REVERSE(ENSTR) TALLYING LEN FOR LEADING SPACES 
	  COMPUTE LEN = LENGTH OF ENSTR - LEN.
	  PERFORM UNTIL CHK = LEN
	  
	  IF ((FUNCTION ORD(ENSTR(CHK:1)) - MODOFF) < (FUNCTION ORD('A')))
	     MOVE FUNCTION CHAR((FUNCTION ORD(ENSTR(CHK:1)) - MODOFF) + 26) TO RECHAR
	  ELSE
		 MOVE FUNCTION CHAR(FUNCTION ORD(ENSTR(CHK:1)) - MODOFF) TO RECHAR
	  END-IF	 
	  IF (((FUNCTION ORD(ENSTR(CHK:1))) >= (FUNCTION ORD('A'))) AND 
	     ((FUNCTION ORD(ENSTR(CHK:1))) <= (FUNCTION ORD('Z'))))
		 IF ((FUNCTION ORD(ENSTR(CHK:1)) - MODOFF) < (FUNCTION ORD('A')))
		    INSPECT ENSTR(CHK:1) REPLACING ALL ENSTR(CHK:1) BY RECHAR
         ELSE
			INSPECT ENSTR(CHK:1) REPLACING ALL ENSTR(CHK:1) BY RECHAR
  		 END-IF
	  ELSE
			INSPECT ENSTR(CHK:1) REPLACING ALL ENSTR(CHK:1) BY ENSTR(CHK:1)
  	  END-IF
      COMPUTE CHK = CHK + 1
  	  END-PERFORM.
	  DISPLAY ENSTR.
      EXIT PROGRAM.
  END PROGRAM DECRYPT.
  
IDENTIFICATION DIVISION.
PROGRAM-ID. SOLVE. 
DATA DIVISION.
  	  WORKING-STORAGE SECTION.
      01 LEN PIC 99.
  	  01 CHK PIC 99 VALUE 1.
	  01 RECHAR PIC X(1).
	  01 INC PIC 99 VALUE 0.
LINKAGE SECTION.
      01 ENSTR PIC X(50).
      77 OFFSET PIC 99.
PROCEDURE DIVISION USING ENSTR OFFSET.
	  INSPECT ENSTR CONVERTING "abcdefghijklmnopqrstuvwxyz" TO "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	  INSPECT FUNCTION REVERSE(ENSTR) TALLYING LEN FOR LEADING SPACES 
	  COMPUTE LEN = LENGTH OF ENSTR - LEN.
	  PERFORM UNTIL CHK = LEN
	  IF ((FUNCTION ORD(ENSTR(CHK:1)) + 1) > (FUNCTION ORD('Z')))
	     MOVE FUNCTION CHAR((FUNCTION ORD(ENSTR(CHK:1)) + 1) - 26) TO RECHAR
	  ELSE
		 MOVE FUNCTION CHAR(FUNCTION ORD(ENSTR(CHK:1)) + 1) TO RECHAR
	  END-IF	 
	  IF (((FUNCTION ORD(ENSTR(CHK:1))) >= (FUNCTION ORD('A'))) AND 
	     ((FUNCTION ORD(ENSTR(CHK:1))) <= (FUNCTION ORD('Z'))))
		 IF ((FUNCTION ORD(ENSTR(CHK:1)) + 1) > (FUNCTION ORD('Z')))
		    INSPECT ENSTR(CHK:1) REPLACING ALL ENSTR(CHK:1) BY RECHAR
         ELSE
			INSPECT ENSTR(CHK:1) REPLACING ALL ENSTR(CHK:1) BY RECHAR
  		 END-IF
	  ELSE
			INSPECT ENSTR(CHK:1) REPLACING ALL ENSTR(CHK:1) BY ENSTR(CHK:1)
  	  END-IF
      COMPUTE CHK = CHK + 1
  	  END-PERFORM.
	  
	  PERFORM UNTIL INC > OFFSET
  	  MOVE 1 TO CHK
	  PERFORM UNTIL CHK = LEN
	  IF ((FUNCTION ORD(ENSTR(CHK:1)) - 1) < (FUNCTION ORD('A')))
	     MOVE FUNCTION CHAR((FUNCTION ORD(ENSTR(CHK:1)) - 1) + 26) TO RECHAR
	  ELSE
		 MOVE FUNCTION CHAR(FUNCTION ORD(ENSTR(CHK:1)) - 1) TO RECHAR
	  END-IF	 
	  IF (((FUNCTION ORD(ENSTR(CHK:1))) >= (FUNCTION ORD('A'))) AND 
	     ((FUNCTION ORD(ENSTR(CHK:1))) <= (FUNCTION ORD('Z'))))
		 IF ((FUNCTION ORD(ENSTR(CHK:1)) - 1) < (FUNCTION ORD('A')))
		    INSPECT ENSTR(CHK:1) REPLACING ALL ENSTR(CHK:1) BY RECHAR
         ELSE
			INSPECT ENSTR(CHK:1) REPLACING ALL ENSTR(CHK:1) BY RECHAR
  		 END-IF
	  ELSE
			INSPECT ENSTR(CHK:1) REPLACING ALL ENSTR(CHK:1) BY ENSTR(CHK:1)
  	  END-IF
      COMPUTE CHK = CHK + 1
  	  END-PERFORM
	  
	  IF (INC > 10)
		 DISPLAY "Caesar 0" INC ": " ENSTR
	  ELSE
	     DISPLAY "Caesar " INC ": " ENSTR
	  END-IF
	  COMPUTE INC = INC + 1
	  END-PERFORM.
      EXIT PROGRAM.
  END PROGRAM SOLVE.
  END PROGRAM CAESAR.